// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { processNode } from "./postmanCollectionProcessor.js";

describe("processNode function", () => {
  const addVariable = jest.fn();
  const generateTestCase = jest.fn();
  const getUrlPath = jest.fn();
  const getObjectFromSwagger = jest.fn();
  const processResponse = jest.fn();
  const logger = {
    error: jest.fn(),
  };
  const node = {
    body: {
      mode: "formdata",
      formdata: [
        {
          key: "test_key",
          value: "test_value",
        },
      ],
    },
    url: {
      variable: [
        {
          key: "urlvar_key",
          value: "urlvar_value",
        },
      ],
      query: [
        {
          key: "query_key",
          value: "query_value",
        },
      ],
    },
    header: [
      {
        key: "header_key",
        value: "header_value",
      },
    ],
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  test("should process Node correctly", async () => {
    getObjectFromSwagger.mockReturnValue({});
    await processNode(node);

    expect(addVariable).toHaveBeenCalledWith('{{test_key}}');
    expect(addVariable).toHaveBeenCalledWith('{{urlvar_key}}');
    expect(addVariable).toHaveBeenCalledWith('{{query_key}}');
    expect(addVariable).toHaveBeenCalledWith('{{header_key}}');
  });

  test("should process Node with different modes correctly", async () => {
    getObjectFromSwagger.mockReturnValue({});
    node.body.mode = 'urlencoded';
    node.body.urlencoded = node.body.formdata;

    await processNode(node);

    expect(addVariable).toHaveBeenCalledWith('{{test_key}}');
  });

  test("should handle error while parsing raw body", async () => {
    getObjectFromSwagger.mockReturnValue({});
    node.body.mode = 'raw';
    node.body.raw = 'unparseable raw body';

    await processNode(node);

    expect(logger.error).toHaveBeenCalled();
  });
});
