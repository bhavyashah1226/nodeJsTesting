// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { processNode } from "./postmanCollectionProcessor.js";

describe('Tests for processNode function', () => {
    let originalNode;

    beforeEach(() => {
        originalNode = {
            "header": [{
                "key": "Content-Type",
                "value": "application/json"
            }],
            "url": {
                "variable": [{
                    "key": "token",
                    "value": "12345"
                }],
                "query": [{
                    "key": "query",
                    "value": "test"
                }]
            },
            "body": {
                "mode": "formdata",
                "formdata": [{
                    "key": "data",
                    "value": "test"
                }]
            },
            "request": {
                "method": "GET",
                "header": [],
                "url": {},
                "body": {}
            }
        };
    });

    test('should return modified node object', async () => {
        const node = await processNode(originalNode);
        expect(node.header[0].value).toBe("{{Content-Type}}");
        expect(node.url.variable[0].value).toBe("{{token}}");
        expect(node.url.query[0].value).toBe("{{query}}");
        expect(node.body.formdata[0].value).toBe("{{data}}");
    });

    test('should add variable to the node where required', async () => {
        originalNode.body.mode = "urlencoded";
        originalNode.body.urlencoded = [{
            "key": "encoded",
            "value": "test"
        }];
        const node = await processNode(originalNode);
        expect(node.body.urlencoded[0].value).toBe("{{encoded}}");
    });

    test('should deal with body mode raw', async () => {
        originalNode.body.mode = "raw";
        originalNode.body.raw = '{"key":"value"}';
        const node = await processNode(originalNode);
        expect(JSON.parse(node.body.raw)).toMatchObject({ key: '{{key}}' });
    });

    test('deals with objects properly', async () => {
        originalNode.someObject = {
            key1: 'value1'
        }
        const node = await processNode(originalNode);
        expect(node.someObject.key1).toBe('{{key1}}')
    });

    test('should deal with arrays properly', async () => {
        originalNode.someArray = [{
            key2: "value2"
        }];
        const node = await processNode(originalNode);
        expect(node.someArray[0].key2).toBe('{{key2}}')
    });
});
