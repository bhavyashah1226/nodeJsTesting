// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { processNode } from './postmanCollectionProcessor.js';

describe('processNode function', () => {
  let node;

  beforeEach(() => {
    node = {
      header: [
        { value: "nonTemplateHeader", key: "nonTemplateKey" },
        { value: "{{templateHeader}}", key: "templateKey" }
      ],
      url: {
        variable: [{ value: "nonTemplateVariable", key: "nonTemplateVariableKey" }],
        query: [{ value: "nonTemplateQuery", key: "nonTemplateQueryKey" }]
      },
      body: {
        mode: 'raw',
        raw: '{ "field": "value" }'
      }
    };
  });

  test('should process node with header values', async () => {
    const result = await processNode(node);

    expect(result.header[0].value).toEqual('{{nonTemplateKey}}');
    expect(result.header[1].value).toEqual('{{templateHeader}}');
  });

  test('should process node with url variables and queries', async () => {
    const result = await processNode(node);

    expect(result.url.variable[0].value).toEqual('{{nonTemplateVariableKey}}');
    expect(result.url.query[0].value).toEqual('{{nonTemplateQueryKey}}');
  });

  test('should process raw body of node', async () => {
    const result = await processNode(node);

    expect(JSON.parse(result.body.raw)).toEqual({ field: '{{field}}' });
  });

  test('should return original node if not an array or object', async () => {
    const result = await processNode(123);
    
    expect(result).toEqual(123);
  });
});
