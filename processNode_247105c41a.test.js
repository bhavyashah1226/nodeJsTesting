// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { processNode } from "./postmanCollectionProcessor.js";
import exemptHeaders from "../constants/exemptHeaders.js";

jest.mock("../utils/logUtility.js", () => {
  return {
    logger: { error: jest.fn() }
  };
});

jest.mock("../utils/fetcherUtility.js", () => {
  return {
    getObjectFromSwagger: jest.fn(() => ({ parameters: [] }))
  };
});

describe("ProcessNode", () => {
  const addVariable = jest.fn();
  const checkNodeStructure = (node) => {
    expect(node).toHaveProperty("header");
    expect(node).toHaveProperty("url");
    expect(node).toHaveProperty("body");
    expect(node).toHaveProperty("request");
    node.header.forEach(header => expect(header.value).toMatch(/{{.*}}/));
    node.url.variable.forEach(variable => expect(variable.value).toMatch(/{{.*}}/));
  };
  
  const getUrlPath = jest.fn(() => '/example/path');
  const generateTestCase = jest.fn();

  it("should handle an array node", async () => {
    const input = [{ header: [{ key: "Authorization", value: "Bearer token" }], url: { variable: [{ key: "id", value: "1" }] }, body: { mode: "formdata", formdata: [{ key: "key1", value: "value1" }] }, request: { method: "GET", header: [], url: "", body: "" } }];
    const processOutput = await processNode(input, exemptHeaders, addVariable, getUrlPath, generateTestCase);
    processOutput.forEach(node => checkNodeStructure(node));
  });

  it("should handle an object node", async () => {
    const input = { header: [{ key: "Authorization", value: "Bearer token" }], url: { variable: [{ key: "id", value: "1" }] }, body: { mode: "formdata", formdata: [{ key: "key1", value: "value1" }] }, request: { method: "GET", header: [], url: "", body: "" } };
    const processOutput = await processNode(input, exemptHeaders, addVariable, getUrlPath, generateTestCase);
    checkNodeStructure(processOutput);
  });

  it("should catch json parse error", async () => {
    const input = { header: [{ key: "Content-Type", value: "application/json" }], url: { variable: [{}]}, body: { mode: "raw", raw: "Not JSON", options: {raw: {language: "json"}}}, request: { method: "GET" } };
    const { logger } = require("../utils/logUtility.js");
    await processNode(input, exemptHeaders, addVariable, getUrlPath, generateTestCase);
    expect(logger.error).toHaveBeenCalledWith("Error parsing raw body:","Unexpected token N in JSON at position 0","Not JSON");
  });
});
