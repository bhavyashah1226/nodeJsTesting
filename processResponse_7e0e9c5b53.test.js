// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { processResponse } from "./postmanCollectionProcessor.js";
import { logger } from "../utils/logUtility.js";

jest.mock("../utils/logUtility.js");

describe('Test for processResponse method', () => {
    beforeEach(() => {
        logger.error.mockClear();
    });

    test('Should handle headers successfully', async () => {
        const responseNode = {
            header: [{key: "Test-Header", value: "Test-Value"}],
            body: []
        };

        const result = await processResponse(responseNode);
        expect(result.header[0].value).toBe("{{res_Test-Header}}");
        expect(logger.error).toHaveBeenCalledTimes(0);
    });

    test('Should handle exempt headers successfully', async () => {
        const responseNode = {
            header: [{key: "Test", value: "{{Exempt-Header}}"}],
            body: []
        };

        const result = await processResponse(responseNode);
        expect(result.header[0].value).toBe("{{Exempt-Header}}");
        expect(logger.error).toHaveBeenCalledTimes(0);
    });

    test('Should handle JSON body successfully', async () => {
        const responseNode = {
            header: [{key: "Content-Type", value: "application/json"}],
            body: [{raw: '{ "testKey": "testValue" }'}]
        };
			
        const result = await processResponse(responseNode);
        const expectedBodyRaw = '{\n    "testKey": "testValue"\n}';
        expect(result.body[0].raw).toBe(expectedBodyRaw);
        expect(logger.error).toHaveBeenCalledTimes(0);
    });

    test('Should handle errors successfully', async () => {
        const responseNode = {
            header: [{key: "Content-Type", value: "application/json"}],
            body: [{raw: 'Invalid JSON'}]
        };
			
        const result = await processResponse(responseNode);
        expect(result).toBeUndefined();
        expect(logger.error).toHaveBeenCalled();
    });
});
