// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { processResponse } from "./postmanCollectionProcessor.js";

describe("Test processResponse function", () => {
  
  beforeEach(() => {
    global.logger = {
      error: jest.fn()
    };
    global.addVariable = jest.fn();
  });

  it("If header array is given, function replaces untemplated header values and calls addVariable function", async () => {
    const responseNode = {
      header: [
        {
          key: "testHeader",
          value: "testValue"
        },
        {
          key: "templatedHeader",
          value: "{{templatedValue}}"
        }
      ]
    };

    await processResponse(responseNode);

    expect(responseNode).toEqual({
      header: [
        {
          key: "testHeader",
          value: "{{res_testHeader}}"
        },
        {
          key: "templatedHeader",
          value: "{{templatedValue}}"
        }
      ]
    });
    expect(addVariable).toHaveBeenCalledTimes(2);
  });

  it("If json body is given, function replaces untemplated values and calls addVariable function", async () => {
    const responseNode = {
      body: {
        raw: JSON.stringify({
          testKey: "testValue",
          nestedKey: {
            nestedTestKey: "nestedTestValue"
          },
          templatedKey: "{{templatedValue}}"
        }),
        options: {
          raw: {
            language: "json"
          }
        }
      },
      header: [
        {
          key: "Content-Type",
          value: "application/json"
        }
      ]
    };

    await processResponse(responseNode);

    expect(responseNode).toEqual({
      body: {
        raw: JSON.stringify({
          testKey: "{{res_testKey}}",
          nestedKey: {
            nestedTestKey: "{{res_nestedTestKey}}"
          },
          templatedKey: "{{templatedValue}}"
        }),
        options: {
          raw: {
            language: "json"
          }
        }
      },
      header: [
        {
          key: "Content-Type",
          value: "application/json"
        }
      ]
    });
    expect(addVariable).toHaveBeenCalledTimes(3);
  });

  it("If json body is not valid, function catches error and logs it", async () => {
    const responseNode = {
      body: {
        raw: "invalidJsonString",
        options: {
          raw: {
            language: "json"
          }
        }
      },
      header: [
        {
          key: "Content-Type",
          value: "application/json"
        }
      ]
    };

    await processResponse(responseNode);

    expect(logger.error).toHaveBeenCalled();
  });

});
