// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { processResponse } from './postmanCollectionProcessor';

jest.mock('../utils/logUtility', () => ({
  logger: {
    error: jest.fn()
  }
}));

jest.mock('../utils/commonUtility', () => ({
  addVariable: jest.fn()
}));

describe('processResponse', () => {
  let responseNode;

  beforeEach(() => {
    responseNode = {
      header: [{
        key: 'Content-Type',
        value: 'application/json'
      }],
      body: {
        raw: JSON.stringify({
          key1: 'value1',
          key2: 'value2'
        })
      }
    };
  });

  it('should process headers and body correctly', async () => {
    const result = await processResponse(responseNode);

    expect(result.header[0].value).toEqual('{{res_Content-Type}}');
    expect(JSON.parse(result.body.raw)).toEqual({
      key1: '{{res_key1}}',
      key2: '{{res_key2}}'
    });
  });

  it('should process headers and body correctly when body is an object', async () => {
    responseNode.body.raw = JSON.stringify({
      key1: {
         nestedKey1: 'nestedValue1',
         nestedKey2: 'nestedValue2'
      },
      key2: 'value2'
    });

    const result = await processResponse(responseNode);

    expect(result.header[0].value).toEqual('{{res_Content-Type}}');
    expect(JSON.parse(result.body.raw)).toEqual({
      key1: {
         nestedKey1: '{{res_nestedKey1}}',
         nestedKey2: '{{res_nestedKey2}}'
      },
      key2: '{{res_key2}}'
    });
  });

  it('should not process body when Content-Type is not application/json', async () => {
    responseNode.header[0].value = 'text/html';

    const result = await processResponse(responseNode);

    expect(result.header[0].value).toEqual('{{res_Content-Type}}');
    expect(result.body.raw).toEqual(JSON.stringify({
      key1: 'value1',
      key2: 'value2'
    }));
  });

  it('should handle JSON parse error', async () => {
    responseNode.body.raw = 'invalid json';

    const result = await processResponse(responseNode);

    expect(logger.error).toBeCalledWith('Error parsing raw body:', expect.any(String), 'invalid json');
    expect(result).toBeUndefined();
  });
});
