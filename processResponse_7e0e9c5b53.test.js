// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { processResponse } from "./postmanCollectionProcessor.js";

describe("Response Processor", () => {
  beforeEach(() => {
    jest.clearAllMocks();
  })
  
  test("processResponse should transform header values", async () => {
    const responseNode = {
      header: [
        { key: "Auth", value: "Bearer TokenValue" },
        { key: "Content-Type", value: "application/json" }
      ]
    };
    const result = await processResponse(responseNode);
    expect(result.header).toEqual([
      { key: "Auth",value: "{{res_Auth}}"},
      { key: "Content-Type", value: "application/json" }
    ]);
  });

  test("processResponse should return original responseNode when header is not an array", async () => {
    const responseNode = { header: "invalid_header" };
    const result = await processResponse(responseNode);
    expect(result).toEqual(responseNode);
  });

  test("processResponse should transform JSON body values", async () => {
    const responseNode = {
      header: [{ key: "Content-Type", value: "application/json" }],
      body: { raw: '{"name":"John"}'}
    };
    const result = await processResponse(responseNode);
    expect(result.body.raw).toEqual('{\n    "name": "{{res_name}}"\n}');
  });

  test("processResponse should return original responseNode when body is not a JSON", async () => {
    const responseNode = {
      header: [{ key: "Content-Type", value: "text/html" }],
      body: { raw: "<h1>Hello World</h1>"}
    };
    const result = await processResponse(responseNode);
    expect(result).toEqual(responseNode);
  });

  test("processResponse should handle errors when body is invalid JSON", async () => {
    const responseNode = {
      header: [{ key: "Content-Type", value: "application/json" }],
      body: { raw: '{"name":"John",}'}
    };
    const result = await processResponse(responseNode);
    expect(result).toBeUndefined();
  });
})
