// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { generateTestCase } from "./postmanCollectionProcessor.js";

describe("Generate test case function", () => {
  let testScript, responseObj, methodType, swaggerObj, swaggerContent;

  beforeEach(() => {
    testScript = "";
    responseObj = { code: 200, name: 'Success', status: 'OK' };
    methodType = 'GET';
    swaggerObj = { responses: { '200': { description: 'Success', content: { 'application/json': { schema: { properties: { id: { type: 'number' } } } } } } } };
    swaggerContent = JSON.stringify(swaggerObj);
  });

  test("without swaggerObj and responseObj.body", async () => {
    swaggerObj = null;
    responseObj.body = null;
    const result = await generateTestCase(testScript, responseObj, methodType, swaggerObj, swaggerContent);
    expect(result).toContain('pm.response.code == 200');
    expect(result).toContain('pm.test("Success", function');
  });

  test("with swaggerObj and property has no type", async () => {
    swaggerObj.responses['200'].content['application/json'].schema.properties.id.type = null;
    const result = await generateTestCase(testScript, responseObj, methodType, swaggerObj, swaggerContent);
    expect(result).toContain('pm.response.code == 200');
    expect(result).toContain('pm.test("Success", function');
  });

  test("with POST methodType and property has type", async () => {
    methodType = 'POST';
    const result = await generateTestCase(testScript, responseObj, methodType, swaggerObj, swaggerContent);
    expect(result).toContain('pm.response.code == 200');
    expect(result).toContain('pm.test("Success", function');
    expect(result).toContain('pm.expect(pm.response.json()).to.have.property("id")');
    expect(result).toContain('pm.expect(typeof pm.response.json().id).to.equal("number")');
  });
});
