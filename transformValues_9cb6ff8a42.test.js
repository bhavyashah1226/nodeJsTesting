// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { transformValues } from "../postmanCollectionProcessor.js";
import { addVariable } from "../utils/commonUtility.js";

describe('PostmanCollectionProcessor', () => {

  // Mocking addVariable function
  jest.mock('../utils/commonUtility.js', () => {
    return {
      addVariable: jest.fn()
    };
  });

  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('Check if null values in the object are being handled properly', async () => {
    const inputObj = {name: "Alice", address: null};
    const resultObj = await transformValues(inputObj);

    expect(resultObj).toEqual({name: "{{name}}", address: null});
    expect(addVariable).toHaveBeenCalledWith("{{name}}");
  });

  test('Check if the transformation is correctly applied in nested objects', async () => {
    const inputObj = {name: "Alice", details: {age: "26", city: "NY"}};
    const resultObj = await transformValues(inputObj);

    expect(resultObj).toEqual({name: "{{name}}", details: {age: "{{age}}", city: "{{city}}"}});
    expect(addVariable).toHaveBeenCalledWith("{{name}}");
    expect(addVariable).toHaveBeenCalledWith("{{age}}");
    expect(addVariable).toHaveBeenCalledWith("{{city}}");
  });

  test('Check if the strings already in correct format are not being transformed', async () => {
    const inputObj = {id: "{{res_id}}"};
    const resultObj = await transformValues(inputObj);

    expect(resultObj).toEqual({id: "{{res_id}}"});
    expect(addVariable).toHaveBeenCalledWith("{{res_id}}");
  });

  test('Check if non-string values are not transformed', async () => {
    const inputObj = {id: 12345};
    const resultObj = await transformValues(inputObj);

    expect(resultObj).toEqual({id: 12345});
    expect(addVariable).not.toHaveBeenCalledWith("{{id}}");
  });

  afterEach(() => {
    jest.clearAllMocks();
  });
});
