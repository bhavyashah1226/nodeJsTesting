// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { transformValues, addVariable } from './postmanCollectionProcessor';

describe('Testing the updated transformValues method', () => {
  let jsonMock;

  beforeEach(() => {
    jsonMock = {
      id: '123',
      name: 'test-json',
      valueToTransform: 'transformThis',
      nestedJson: {
        nestedId: 'nested-123',
        nestedName: 'nested-test-json',
        nestedValueToTransform: 'transformThisToo'
      }
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });
  
  test('Should transform new fields not included between double curly brackets correctly', async () => {
    const mockAddVariable = jest.spyOn(postmanCollectionProcessor, 'addVariable');
    const transformedJson = await transformValues(jsonMock);

    expect(transformedJson.valueToTransform).toBe('{{valueToTransform}}');
    expect(transformedJson.nestedJson.nestedValueToTransform).toBe('{{nestedValueToTransform}}');
    expect(mockAddVariable).toHaveBeenCalledTimes(4);
  });

  test('Should transform string values of json object correctly', async () => {
    const mockAddVariable = jest.spyOn(postmanCollectionProcessor, 'addVariable');
    const transformedJson = await transformValues(jsonMock);
    
    expect(transformedJson.name).toBe('{{name}}');
    expect(transformedJson.nestedJson.nestedName).toBe('{{nestedName}}');
    expect(mockAddVariable).toHaveBeenCalledTimes(4);
  });

  test('Should not transform non-string values of json object', async () => {
    const transformedJson = await transformValues(jsonMock);
  
    expect(transformedJson.id).toBe('123');
    expect(transformedJson.nestedJson.nestedId).toBe('nested-123');
  });

  test('Should keep values between double curly brackets as it is', async () => {
    jsonMock.name = '{{keepThis}}';
    jsonMock.nestedJson.nestedName = '{{alsoKeepThis}}';
  
    const transformedJson = await transformValues(jsonMock);
  
    expect(transformedJson.name).toBe('{{keepThis}}');
    expect(transformedJson.nestedJson.nestedName).toBe('{{alsoKeepThis}}');
  });
});
