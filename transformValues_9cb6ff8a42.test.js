// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

// Test generated by RoostGPT for test nodeJsTest3 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { transformValues } from "./postmanCollectionProcessor";

describe("transformValues function", () => {
  let input, output;

  beforeEach(() => {
    input = { 
      stringField: "some string", 
      objectField: { nestedStringField: "nested string" } 
    };

    output = { 
      stringField: "{{stringField}}", 
      objectField: { nestedStringField: "{{nestedStringField}}" } 
    };
  });

  test("should transform string values appropriately", async () => {
    const result = await transformValues(input);
    expect(result).toEqual(output);
  });

  test("should not transform values which are not of string type", async () => {
    const nonStringInput = { numberField: 123, booleanField: true };
    const result = await transformValues(nonStringInput);
    expect(result).toEqual(nonStringInput);
  });

  test("should throw error when input does not have any properties", async () => {
    await expect(transformValues({})).rejects.toThrow();
  });

  test("should verify transformed values are prefixed and suffixed with '{{' and '}}'", async () => {
    const result = await transformValues(input);
    for (let key in result) {
      if (typeof result[key] === 'object') {
        for (let nestedKey in result[key]) {
          expect(result[key][nestedKey]).toMatch(/{{.*}}/);
        }
      } else {
        expect(result[key]).toMatch(/{{.*}}/);
      }
    }
  });

  test("should call addVariable function for each string value transformed", async () => {
    const addVariable = jest.fn();
    await transformValues(input);
    expect(addVariable).toHaveBeenCalledTimes(2);
  });
});
