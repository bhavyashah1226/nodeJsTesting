// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { transformValues, addVariable } from "./postmanCollectionProcessor.js";

jest.mock('./postmanCollectionProcessor.js', () => ({
  addVariable: jest.fn(),
  transformValues: jest.requireActual('./postmanCollectionProcessor.js').transformValues
}));

describe('transformValues method', () => {

  let jsonInput, jsonOutput;

  beforeEach(() => {
    // initialization before each test
    jsonInput = { 
      id : "1",
      name : "John",
      address: {
        street : "Broadway",
        num: '10',
      },
      metaData: "data"
    };
    jsonOutput = transformValues(jsonInput);
  });

  test('Check return type', async () => {
    expect(typeof(jsonOutput)).toBe('object');
  });

  test('Check transformed string values', async () => {
    expect(jsonOutput.name).toBe("{{name}}");
    expect(jsonOutput.metaData).toBe("{{metaData}}");
  });

  test('Check transformed string values in nested object', async () => {
    expect(jsonOutput.address.street).toBe("{{street}}");
  });

  test('Check unchanged non-string value', async () => {
    expect(jsonOutput.id).toBe("{{id}}");
    expect(jsonOutput.address.num).toBe("{{num}}");
  });
  
  test('Check for null or undefined values', async () => {
    jsonInput = { 
      id : null,
      name : undefined,
    };
    jsonOutput = transformValues(jsonInput);
    expect(jsonOutput.id).toBe(null);
    expect(jsonOutput.name).toBe(undefined);
  });

  test('Check addVariable function call', async () => {
    expect(addVariable).toHaveBeenCalled();
  });

});
