// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { transformValues } from "./postmanCollectionProcessor";

describe('Transform Values Function', () => {
  beforeEach(() => {
    global.addVariable = jest.fn();
  });

  describe('function type check', () => {
    const json = { key: 'value' };
    const result = transformValues(json);
  
    test('function should return a promise', () => {
      expect(result instanceof Promise).toBe(true);
    });
  });

  describe('Scenario: Input is an object', () => {
    test('Should call the addVariable function', async () => {
      const json = { key: 'value' };
      await transformValues(json);
      expect(addVariable).toHaveBeenCalled();
    });
  });

  describe('Scenario: Input is a nested object', () => {
    test('Should recursively call transformValues and addVariable functions', async () => {
      const json = { key: 'value', nested: { key: 'nested value' } };
      await transformValues(json);
      expect(addVariable).toHaveBeenCalledTimes(2);
    });
  });

  describe('Scenario: Input is an object with variable reference', () => {
    test('Should not modify the variable references and call addVariable function', async () => {
      const json = { key: '{{variable_reference}}' };
      await transformValues(json);
      expect(json['key']).toBe('{{variable_reference}}');
      expect(addVariable).toHaveBeenCalledTimes(1);
    });
  });

  describe('Scenario: Input is an object with non-variable string value', () => {
    test('Should modify the string value into a variable reference and call addVariable function', async () => {
      const json = { key: 'value' };
      await transformValues(json);
      expect(json['key']).toBe('{{key}}');
      expect(addVariable).toHaveBeenCalledTimes(1);
    });
  });

  describe('Scenario: Error handling', () => {
    test('Should throw an error when input is not an object', async () => {
      const json = 'this is a string, not an object';
      await expect(transformValues(json)).rejects.toThrow(TypeError);
    });
  });
});
