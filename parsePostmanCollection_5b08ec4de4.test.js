// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { parsePostmanCollection } from './postmanCollectionProcessor.js';

describe("Testing parsePostmanCollection method", () => {
  let node, responseNode, swaggerContent, logger;

  beforeEach(() => {
    node = {
      request: {
        method: "GET",
        header: [
          { key: "Content-Type", value: "application/json" }
        ],
        url: {
          raw: "https://api.example.com/test",
          variable: [
            { key: "testVar", value: "varValue" }
          ],
          query: [
            { key: "testQ", value: "qValue" }
          ]
        },
        body: {
          mode: "urlencoded",
          urlextended: [
            { key: "testU", value: "uValue" }
          ]
        }
      }
    };

    responseNode = {
      header: [
        { key: "Content-Type", value: "application/json" }
      ],
      body: {
        raw: 'application/json',
        options: {
          raw: { language: "json" }
        }
      }
    };

    swaggerContent = { /* some swagger content */ };

    logger = jest.spyOn(logger, 'error').mockImplementation();
  });

  afterEach(() => {
    logger.mockRestore();
  });

  test("Should correctly parse collection for successful GET request", async () => {
    const collection = await parsePostmanCollection(node, swaggerContent);
    expect(collection).not.toBeNull();
    expect(collection.request.method).toBe("GET");
    expect(logger.error).not.toHaveBeenCalled();
  });

  test("Should catch error and log it for malformed JSON in body", async () => {
    responseNode.body.raw = "{ malformed json }";
    await parsePostmanCollection(node, swaggerContent);
    expect(logger.error).toHaveBeenCalledWith("Error parsing raw body:", expect.any(Error), responseNode.body.raw);
  });
});
