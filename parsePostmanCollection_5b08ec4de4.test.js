// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

describe("Test parsePostmanCollection function", () => {
  let node;
  let swaggerContent;

  beforeEach(() => {
    node = {
      header: [
        { key: "Content-Type", value: "application/json" },
        { key: "Authorization", value: "Bearer token" },
      ],
      url: {
        variable: [{ key: "ItemID", value: "12345" }],
        query: [{ key: "filter", value: "test" }],
      },
      body: {
        mode: "raw",
        raw: JSON.stringify({
          itemId: "12345",
          name: "Item1"
        })
      }
    };

    swaggerContent = {
      "paths": {
        "/items/{itemId}": {
          "get": {
            "parameters": [
              {
                "name": "itemId",
                "in": "path",
                "required": true,
                "type": "string"
              },
              {
                "name": "filter",
                "in": "query",
                "type": "string"
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "itemId": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "swagger": "2.0",
      "info": {
        "version": "1.0.0",
        "title": "Item API"
      },
      "host": "localhost:3000",
      "basePath": "/v1"
    };
  });

  test("should return original node if header is not an array", async () => {
    node.header = "not array";

    const result = await parsePostmanCollection(node, swaggerContent);
    expect(result).toEqual(node);
  });

  test("should modify non-exempt headers", async () => {
    const result = await parsePostmanCollection(node, swaggerContent);

    // Check header transformation
    expect(result.header).toContainEqual({ key: "Authorization", value: "{{Authorization}}" });
  });

  test("should modify url variable and query", async () => {
    const result = await parsePostmanCollection(node, swaggerContent);

    // Check url variable and query transformation
    expect(result.url.variable).toContainEqual({ key: "ItemID", value: "{{ItemID}}" });
    expect(result.url.query).toContainEqual({ key: "filter", value: "{{filter}}" });
  });

  test("should modify raw body", async () => {
    const result = await parsePostmanCollection(node, swaggerContent);
    
    // Check body transformation
    const bodyJson = JSON.parse(result.body.raw);
    expect(bodyJson.itemId).toEqual("{{itemId}}");
    expect(bodyJson.name).toEqual("{{name}}");
  });
});
