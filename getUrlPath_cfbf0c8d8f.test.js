// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { getUrlPath } from './postmanCollectionProcessor';

describe('getUrlPath method tests', () => {

  test('getUrlPath should handle paths correctly', () => {
    let urlObj = { path: ['users', '1'] };
    let expected = '/users/1';
    let result = getUrlPath(urlObj);
    expect(result).toEqual(expected);
  });

  test('getUrlPath should handle query parameters correctly', () => {
    let urlObj = { path: ['users', '1'], query: [{ key: 'fields', value: 'name,email' }] };
    let expected = '/users/1?fields=name,email';
    let result = getUrlPath(urlObj);
    expect(result).toEqual(expected);
  });

  test('getUrlPath should return an empty string for an undefined input', () => {
    let result = getUrlPath();
    expect(result).toEqual("");
  });
  
  test('getUrlPath should return an empty string for an empty object', () => {
    let urlObj = {};
    let result = getUrlPath(urlObj);
    expect(result).toEqual("");
  });
  
  test('getUrlPath should concatenate multiple query parameters correctly', () => {
    let urlObj = { path: ['users', '1'], query: [{ key: 'fields', value: 'name,email' }, { key: 'order', value: 'asc' }] };
    let expected = '/users/1?fields=name,email&order=asc';
    let result = getUrlPath(urlObj);
    expect(result).toEqual(expected);
  });

  test('getUrlPath should ignore undefined query parameters', () => {
    let urlObj = { path: ['users', '1'], query: [{ key: 'fields', value: undefined }, { key: 'order', value: 'asc' }] };
    let expected = '/users/1?order=asc';
    let result = getUrlPath(urlObj);
    expect(result).toEqual(expected);
  });
});
