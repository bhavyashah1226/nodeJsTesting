// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { readSpecFile } from './postmanCollectionProcessor.js';
import SwaggerParser from "swagger-parser";
import { convertOpenApiToPostman } from "../utils/openapiToPostmanConverter.js";
jest.mock('fs');

describe('readSpecFile tests', () => {
  let specFile;

  beforeEach(async () => {
    specFile = './swagger.yml';
    SwaggerParser.validate.mockClear();
    convertOpenApiToPostman.mockClear();
  });

  test('#case1: When the specFile is validated & transformed successfully, should write to modified_postman.json', async () => {
    const postmanCollection = JSON.stringify({ item: [], info: {} });

    SwaggerParser.validate.mockResolvedValueOnce({ host: 'localhost' });
    convertOpenApiToPostman.mockResolvedValueOnce({ postmanCollection });

    await readSpecFile(specFile);

    expect(SwaggerParser.validate).toHaveBeenCalledWith(specFile);
    expect(convertOpenApiToPostman).toHaveBeenCalledWith(specFile);
    expect(fs.writeFileSync).toHaveBeenCalledWith("modified_postman.json", postmanCollection, 'utf-8');
  });

  test('#case2: When the specFile validation fails, should throw an error', async () => {
    SwaggerParser.validate.mockRejectedValueOnce(new Error('File not valid'));

    await expect(readSpecFile(specFile)).rejects.toThrow('File not valid');
    expect(SwaggerParser.validate).toHaveBeenCalledWith(specFile);
  });

  test('#case3: When the specFile transformation to postman fails, should throw an error', async () => {
    SwaggerParser.validate.mockResolvedValueOnce({ host: 'localhost' });
    convertOpenApiToPostman.mockRejectedValueOnce(new Error('Transformation failed'));

    await expect(readSpecFile(specFile)).rejects.toThrow('Transformation failed');
    expect(SwaggerParser.validate).toHaveBeenCalledWith(specFile);
    expect(convertOpenApiToPostman).toHaveBeenCalledWith(specFile);
  });
});
