// Test generated by RoostGPT for test nodeJsTest1 using AI Type Azure Open AI and AI Model roost-gpt4-32k

import { readSpecFile } from "../postmanCollectionProcessor.js";

// Mocking fs library
jest.mock('fs', () => ({
  writeFileSync: jest.fn(() => {}),
}));

// Mocking SwaggerParser
jest.mock('swagger-parser', () => ({
  validate: jest.fn(() => Promise.resolve()),
}));

// Mocking our custom function
jest.mock('../utils/openapiToPostmanConverter.js', () => ({
  convertOpenApiToPostman: jest.fn(() => Promise.resolve({postmanCollection: JSON.stringify({test: "test"})}))
}));

describe('readSpecFile', () => {

  beforeEach(() => {
    jest.clearAllMocks();
  })

  test('should handle SwaggerParser validation error properly', async () => {
    const error = new Error('Swagger Parser validation error');
    SwaggerParser.validate.mockImplementationOnce(() => Promise.reject(error));

    await readSpecFile('specFilePath');
    expect(logger.warn).toHaveBeenCalledWith(`Error validating swagger yaml: ${error}`);
  });

  test('should handle convertOpenApiToPostman error appropriately', async () => {
    const error = new Error('Failed to convert OpenApi to Postman');
    convertOpenApiToPostman.mockImplementationOnce(() => Promise.reject(error));

    await readSpecFile('specFilePath');
    expect(logger.error).toHaveBeenCalledWith('Error:', error.message);
  });

  test('should write to file with postmanJson when everything is smooth', async () => {
    await readSpecFile('specFilePath');
    expect(fs.writeFileSync).toHaveBeenCalled();
  });
});
